// backend/routes/auth.js
const express = require("express");
const router = express.Router();
const pool = require("../db");

/* ---------- helpers ---------- */

// ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ bcrypt ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÅ‡∏•‡∏∞ hash ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö bcrypt ($2...)
async function verifyPassword(inputPassword, userRow) {
  const hash = userRow?.password_hash || userRow?.passwordHash;
  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ bcrypt-hash ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ bcrypt
  if (hash && typeof hash === "string" && hash.startsWith("$2")) {
    try {
      const bcrypt = require("bcrypt"); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ‡∏à‡∏∞ throw ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ fallback ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
      return await bcrypt.compare(String(inputPassword), String(hash));
    } catch (e) {
      console.warn("bcrypt not available ‚Üí fallback to plain compare");
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ bcrypt ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô hash ‚Üí ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
      return false;
    }
  }
  // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡πá‡∏ö plain text ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ï‡∏≠‡∏ô‡∏û‡∏±‡∏í‡∏ô‡∏≤
  const plain = userRow?.password || userRow?.pass || null;
  if (plain == null) return false;
  return String(inputPassword) === String(plain);
}

/* ---------- routes ---------- */

// POST /api/login   (body: { username?, email?, password })
router.post("/login", async (req, res) => {
  try {
    const { username, email, password } = req.body || {};

    if (!password || (!username && !email)) {
      return res
        .status(400)
        .json({ message: "‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" });
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° email ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡πÉ‡∏ä‡πâ username
    const key = email ? "email" : "username";
    const value = email ?? username;

    // ‡πÉ‡∏ä‡πâ placeholder column name ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏î‡πâ‡∏ß‡∏¢ "??"
    const [rows] = await pool.query(
      "SELECT * FROM accounts WHERE ?? = ? LIMIT 1",
      [key, value]
    );

    if (!rows.length) {
      return res.status(401).json({ message: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•/‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    const user = rows[0];

    const ok = await verifyPassword(password, user);
    if (!ok) {
      return res.status(401).json({ message: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•/‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏ö‡∏ö‡∏Å‡∏±‡∏ô‡∏û‡∏±‡∏á (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£)
    let department = null;
    try {
      if (user.major_id != null) {
        const [m] = await pool.query(
          "SELECT name_th FROM majors WHERE id=?",
          [user.major_id]
        );
        department = m?.[0]?.name_th ?? null;
      }
    } catch (e) {
      console.warn("Lookup major failed:", e.message);
    }

    // Payload ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö (‡∏≠‡∏¢‡πà‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô)
    const payload = {
      id: user.id,
      username: user.username ?? null,
      email: user.email ?? null,
      full_name: user.full_name ?? null,
      role: user.role ?? "student",
      year_level: user.year_level ?? null,
      major_id: user.major_id ?? null,
      department,
    };

    // TODO: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô JWT ‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°
    return res.json({ user: payload, token: "dummy-token" });
  } catch (err) {
    console.error("üî• /api/login error:", err);
    return res.status(500).json({ message: "Server error" });
  }
});

router.post("/logout", (req, res) => {
  try {
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ session/cookie ‡∏Å‡πá‡∏•‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏Å‡πá‡∏Ñ‡∏∑‡∏ô ok ‡πÄ‡∏â‡∏¢‡πÜ)
    return res.json({ ok: true });
  } catch (e) {
    return res.status(500).json({ message: "Server error" });
  }
});

module.exports = router;
